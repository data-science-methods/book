{
  "hash": "4aa6c2a9563c413718b53049f3580d3d",
  "result": {
    "markdown": "# Readable code is reliable code \n\n## Reading \n\n- @BryanCodeSmellsFeels2018\n- @WhatLookCode\n- @LambBuildingInclusiveCode2018\n- @WickhamTidyverseStyleGuidea\n\n## Replicability, reproducibility, reliability\n\nreplicability\n  ~ Qualitatively similar results when we repeat the experiment\\\n    (gather new data; may or may not use the same code)\n  \nreproducibility\n  ~ Quantitatively identical outputs when we run the same code on the same data\\\n    (same data, same code)\n  \nreliability\n  ~ The code performs the analysis that we think it's performing\\\n    (compare construct validity)\n    \n## Checking reliability\n\nreliability\n  ~ The code performs the analysis that we think it's performing\n\n*Can reliability be checked computationally?*\n\n\n## Writing code is writing\n\n- Multiple audiences\n    - Collaborators\n    - (Some) reviewers and readers of the paper\n    - Peers who want to analyze and extend your methods\n    - *Yourself in six months*\n\n> Any code of your own that you haven't looked at for six or more months might as well have been written by someone else. (\"Eagleson's Law\")\n\n- Your code is *readable* to the extent that people can easily assess reliability: \n    - predict, \n    - diagnose, and\n    - extend your code\n\n\n## Code style ##\n\niNéwritteNélanguagEáconventionSéfoRîpunctuatioNøcapitalizatioNîaiDéco\\\nmprehensioNébYéindicatinGéstructurE\n\n----\n\n\n- iNéwritteNélanguagEáconventionSéfoRîpunctuatioNøcapitalizatioNîaiDéco\\\n  mprehensioNébYéindicatinGéstructurE\n    - this is what it's like to read poorly-styled code\n    - conventions only work if they're *shared* conventions\n\n- Style guides provide shared conventions for readable code\n    - In-line spacing makes it easier to pick out distinguish functions, operators, and variables in a line\n    - Returns distinguish arguments in a function call\n    - Indentation corresponds to structure of complex expressions\n    - Common conventions for naming, assignment reduce cognitive load\n\n- Tidyverse style guide:  <https://style.tidyverse.org/> [@WickhamTidyverseStyleGuidea]\n\n\n## Highlights from the Tidyverse style guide ##\n\n- Place all `package()` calls at the top of the script\n- Limit your code to 80 characters per line\n- Use at least 4 spaces for indenting multiline expression\n    - Control-I in RStudio will do automagic indenting\n- In multiline function calls, 1 argument = 1 line\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlong_function_name <- function(a = \"a long argument\",\n                               b = \"another argument\",\n                               c = \"another long argument\") {\n    # As usual code is indented by four spaces.\n}\n```\n:::\n\n\n## Spaces: Let your code  b r e a t h e\n\n- Always put spaces after commas, and never before (like English)\n- No space between a function name and the parentheses (like math)\n- Spaces on both sides of infix operators (`==`, `+`, `-`, `<-`, `=`)\n- Pipes `%>%` `|>` should have a space before and be at the end of the line\n\n\n## Code blocks\nWhen you put a block of code in curly braces `{}`: \n\n- `{` should be the last character on a line\n- `}` should be the first character on the line\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (y == 0) {\n  if (x > 0) {\n    log(x)\n  } else {\n    message(\"x is negative or zero\")\n  }\n} else {\n  y^x\n}\n```\n:::\n\n\n\n## Boolean variables vs. control flow\n\n- Functions that return vectors: \n    - `&`, `|`, `==`, `ifelse()`, `dplyr::if_else()`\n- Functions that return a single value: \n    - `&&`, `||`, `identical`\n- `if (x) a else b` only looks at the first (hopefully single) value of `x`\n\n\n## Code review is peer feedback on your writing\n\n- *May* be done formally as part of journal review\n    - But this is super rare\n- Informally, with collaborators\n- Informally, as a stage of writing\n\n\n## Goals of code review\n\n- Make the code more reliable\n- Integrate your code into the collaborative code base\n- Learning and growth for both author and reviewer\n\n*Examples of things that will promote/frustrate these goals?*\n\n[@LambBuildingInclusiveCode2018]\n\n\n## What to look for in code review \n\n- **Good things**:  What does the code do well? \n- **Design**: The code communicates the author's intentions. \n- **Functionality**: The code does what the author intended. \n- **Complexity**: The code isn’t more complex than it needs to be.\n- **Over-engineering**: The developer isn’t implementing things they might need in the future but don’t know they need now.\n- **Tests**: Code has appropriate, well-designed unit tests [or uses assertions]. \n- **Naming**: The developer used clear names for everything.\n- **Comments**: Comments are clear and useful, and mostly explain why instead of what.\n- **Style**: The code follows the group's / a standard style guide. \n- **Documentation**:  Does the code explain what functions or long pipes do and how they're used? \n\n[adapted from @WhatLookCode]\n\n- **Setup**:  The documentation/README explains where to get the data and any special software installation.  \n- **Dependencies**:  All of the required packages are listed at the top of the script. \n- **Reproducibility**: The code runs, and produces the output identified elsewhere (comments, paper text)\n\n## Labs 5-6\n\n- [Lab 5](https://github.com/data-science-methods/lab-5-code-review): Code review of @ZhouExcessCOVID19Cases2021\n    - Work in *pairs*\n    - Write a rubric first\n    - Don't worry about reproducibility\n    - **Start working on this Thursday**, even if you're not finished with lab 4\n- [Lab 6](https://github.com/data-science-methods/lab-6-reproducibility): Reproducibility check of @ZhouExcessCOVID19Cases2021\n    - Specifically, the values reported in Table 1\n\n## Project: Code Review\n\n<https://data-science-methods.github.io/project.html#code-review-and-reproducibility-check>\n\n- I'll assign you to review someone else's EDA code\n- Fork and clone the code\n- Submit your feedback using a PR\n\n\n\n## References\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}