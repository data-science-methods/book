{
  "hash": "b8764fa079d04b9b797d304b2bb17e14",
  "result": {
    "markdown": "# Readable code is reliable code #\n\n## Reading \n\n- @BryanCodeSmellsFeels2018\n- @PostolovskiYourCodeReview2020\n- @BuckensSelfdocumentingMythHow2019\n\n\n## Writing code is writing\n\n- Multiple target audiences\n    - Collaborators\n    - (Some) reviewers and readers of the paper\n    - Peers who want to analyze and extend your methods\n    - *Yourself in two months/one year/five years*\n\n- Your code is *readable* to the extent that people can use it to easily and reliably \n    - predict, \n    - diagnose, and\n    - extend your code\n\n\n## Code style ##\n\n- iNéwritteNélanguagEáconventionSéfoRîpunctuatioNøcapitalizatioNîaiDécomprehensioNébYéindicatinGéstructurE\n    - this is what it's like to read poorly-styled code\n    - conventions only work if they're *shared* conventions\n\n- Style guides provide shared conventions for readable code\n    - In-line spacing makes it easier to pick out distinguish functions, operators, and variables in a line\n    - Returns distinguish arguments in a function call\n    - Indentation corresponds to structure of complex expressions\n    - Common conventions for naming, assignment reduce cognitive load\n\n- Tidyverse style guide:  <https://style.tidyverse.org/>\n\n\n## Highlights from the Tidyverse style guide ##\n\n- Place all `package()` calls at the top of the script\n- Limit your code to 80 characters per line\n- Use at least 4 spaces for indenting multiline expression\n    - Control-I in RStudio will do automagic indenting\n- In multiline function calls, 1 argument = 1 line\n- Use comments to explain \"why\" rather than \"what\" or \"how\"\n    - DH's comment convention: \n    - Single `#` is for code that isn't currently used but might need to be brought back (eg, for debugging)\n    - `##` is for substantial comments\n\n\n## Spaces\n- Always put spaces after commas, and never before (like English)\n- But not between a function name and the parentheses (like math)\n- And surrounding infix operators (`==`, `+`, `-`, `<-`, `=`)\n- Pipes `%>%` `|>` should have a space before and be at the end of the line\n\n\n## Code blocks\nWhen you put a block of code in curly braces `{}`: \n\n- `{` should be the last character on a line\n- `}` should be the first character on the line\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (y == 0) {\n  if (x > 0) {\n    log(x)\n  } else {\n    message(\"x is negative or zero\")\n  }\n} else {\n  y^x\n}\n```\n:::\n\n\n\n## Boolean variables vs. control flow\n\n- Functions that return vectors: \n    - `&`, `|`, `==`, `ifelse()`, `dplyr::if_else()`\n- Functions that return a single value: \n    - `&&`, `||`, `identical`\n- `if (x) a else b` only looks at the first (hopefully single) value of `x`\n\n## References\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}