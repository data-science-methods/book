{
  "hash": "35eb07c90af89973d0720960bca8791e",
  "result": {
    "markdown": "# Git and Version Control #\n\n<!-- https://happygitwithr.com/common-remote-setups.html -->\n\n## Some motivating examples ##\n\n- While working on your analysis code, you accidentally delete the first 35 lines of the script.  You only discover this three days later, when you restart R and try to run the script from the top.  Because you lost half of your senior thesis in undergrad, you hit Control+S to save every couple of minutes.  \n- You're working on a paper with two coauthors.  You prepare the final draft to send for submission: `paper final.docx`.  But one of your coauthors discovers a typo.  Now it's `paper final fixed typo.docx`.  Another realizes six references are missing.  `paper final fixed typo refs.docx`.  That's getting confusing so you change it to `paper 2 Aug 2021.docx`.  Once it comes back from review you need to make revisions.  Now you have `paper 30 Jan 2022.docx` and, after your collaborators make their changes, `paper 12 February 2022 DJH.docx` and `paper 12 February 20222 final.docx`. \n- You have a complicated analysis spread over several scripts.  You want to explore a variant analysis, but doing so will involve changes in 15 different places across 3 different files.  You're not sure if this variant analysis will work; you may or may not want to keep it.  \n\n## Version control ##\n\n- Basic idea: Tools for tracking and reversing changes to code over time\n- Useful for identifying and reversing breaking changes\n- Implementations upload to cloud, track who contributes code, control who can suggest vs. actually change code\n- Good for collaboration, publishing code\n    \n- git\n    - One of many version control systems\n    - Very popular in part thanks to GitHub, which provided free hosting for open-source projects\n        - In April 2020, GitHub also made private/closed-source repositories free\n        - Resources for students (and teachers):  <https://education.github.com/>\n    \n## Gitting started ##\n\n- [git is very hard](https://www.ecosia.org/search?q=git+is+too+complicated&addon=firefox&addonversion=4.0.4)\n- We're going to use the [Sourcetree GUI](https://www.sourcetreeapp.com/) to get started\n\n### Initial commit ###\n\n- Install Sourcetree and go through the configuration steps\n- Then you'll see the (empty) repository browser\n- Create a folder called something like `learning-git`\n- Then, in Sourcetree: \n    - On the Local tab\n    - Select New ... > Create a local repository (or) Drag and drop the folder on to the browser\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Creating a new local repository in `learning-git`](images/02-basics/new_local_repo.png){width=318}\n:::\n:::\n\n\n- You can open the repository in Sourcetree, but it's not interesting yet\n- In `learning-git`, create a text file, eg, `testing.txt`\n- Sourcetree's File Status panel shows the new file, ready to be tracked\n- Tracking changes to a file involves two steps:  **Adding** and **committing**\n- **Add**: Click the checkmark\n    - This tells git that we want to store these changes to the file in its archive\n- **Commit**:  Type a message in the comment field and click Commit\n    - This tells git to go ahead and do the archiving process\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Creating a new local repository in `learning-git`](images/02-basics/initial_commit.png){width=581}\n:::\n:::\n\n\n- The commit is now displayed in the History panel\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The History panel after our first commit](images/02-basics/history.png){width=615}\n:::\n:::\n\n\n*Make a few more changes to the file.  Practice adding and committing them and note how the changes accumulate in the History panel.*\n\n## Time travel ##\n\n- We can **checkout** previous commits to work with old versions of our files\n- In the example, suppose I made a commit with a mistake (my code stopped working or whatever)\n- In the History panel, right-click on a previous commit and select Checkout...\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Checking out an old commit to travel through time](images/02-basics/checkout.png){width=558}\n:::\n:::\n\n\n- Sourcetree warns us that we'll be in an **undetached head state**\n- To see what this means, try making a change to the file, adding and committing it, then checking out the commit with the `main` or `master` tag\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Trying (and failing) to change the past.  My current HEAD commit will disappear as soon as I check out main.](images/02-basics/changing_past.png){width=615}\n:::\n:::\n\n\n## The garden of forking branches ##\n\n- To actually change the past, we'll use a **branch**\n    - Branches allow git to track multiple distinct \"timelines\" for files\n    - For example, most major software projects will have separate \"dev\" (development) and \"release\" branches\n    - Individual branches will also be created for work on specific areas of the project\n    - This allows each area of active work to be isolated from work happening in other areas\n- After checking out the previous commit, click on Branch in the toolbar  \n    - Name your new branch something like `fixing-mistake` (no spaces!)\n- Start to work on fixing the mistake in the file, then add and commit as usual\n- Now checkout `main`.  Notice:  \n    - Your commits on `fixing-mistake` don't disappear\n    - The state of your file changes to the `main` version\n    - The History panel shows the split between the two branches\n- After we've finished fixing the mistake, we want to **merge** these changes back into `main`\n    - Make sure you're current on `main`\n    - Right-click on `fixing-mistake` and select Merge...\n    \n\n::: {.cell}\n::: {.cell-output-display}\n![Merging `fixing-mistake` into `main`](images/02-basics/merge.png){width=556}\n:::\n:::\n\n\n- Sourcetree will bring up a message about **Merge Conflicts**\n    - This just means that the files you're combining have conflicting histories, and git wants you to sort out what to keep and what to throw away\n    \n**Important:**  It's not obvious (there isn't a big red status symbol anywhere), but git is now in a special conflict-resolution state.  Until you resolve the conflicts and finish the merge, a lot of standard git functionality either won't work at all or will cause weird problems.  **If git starts giving you a bunch of weird errors, check to see if you're in the middle of a merge and need to resolve conflicts.** \n    \n- After starting the merge, Sourcetree's File status panel will indicate exactly which files have conflicts.  \n\n\n::: {.cell}\n::: {.cell-output-display}\n![Sourcetree's File status panel indicates which files have conflicts](images/02-basics/conflicts.png){width=615}\n:::\n:::\n\n\n- Your file will look something like this\n\n```\ntest\nanother line\n<<<<<<< HEAD\nthis line has a mistake\n=======\nno mistake this time\n>>>>>>> fixing-mistake\n```\n\n- The `<<<<<<<` and `>>>>>>>` surround each area of conflict.  \n    - The top part (marked `HEAD`) shows the state of the current branch\n    - The bottom part (marked `fixing-mistake`) shows the state of the branch you're merging\n- Simply edit these sections so they're in the state you want, \n    - Then save, go back to Sourcetree's File status panel\n    - Sourcetree generates a commit message indicating that you're resolving conflicts to complete a merge\n- Afterwards the History panel shows the two branches merging back together\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The History panel shows the branches merging back together](images/02-basics/post_merge.png){width=615}\n:::\n:::\n\n\n\n## Generating a GitHub PAT ##\n\n- To get Sourcetree to work with GitHub, we need to generate a PAT (personal access token)\n- On GitHub\n    - Click on your profile image (upper right) to your account settings\n    1. Scroll down to Developer Settings\n    2. Then Personal access tokens\n    3. Put a short description in the Note field\n    4. For our class, we'll need a PAT with the `repo` and `workflow` permissions\n    5. **Important:** After you close/navigate away from the next page, you won't be able to view your PAT again.  \n        - Keep a browser window on this page for the next few minutes\n        - Don't save the PAT anywhere (that defeats the purpose)\n    6. Copy-paste now into Sourcetree's Password field\n        - You may need to enter it again in a few minutes, when you first push up to GitHub \n\n\n## Working with GitHub remotes ##\n\n- A **remote** is a copy of a repository that lives on a server somewhere else\n\n### Working with your own repos ###\n\n- On GitHub, click \"New\" and walk through the steps to create a new repository\n    - The name on GitHub doesn't need to match the local name\n    - But why wouldn't you use the same name? \n- Copy the URL: `https://github.com/username/learning-git`\n\n- Back in Sourcetree\n    1. Go to Settings in the toolbar\n    2. Go to the Remotes tab\n    3. Click Add to add a new remote\n- The standard name for a default remote is `origin`\n    - Paste in the GitHub URL\n    \n\n::: {.cell}\n::: {.cell-output-display}\n![Adding a new remote](images/02-basics/origin.png){width=615}\n:::\n:::\n\n\n- After adding the remote, we can send the repository (including its full history) up to GitHub using **push**\n    - Look for Push in the toolbar\n    - Sourcetree will ask which branches to push\n- When the push is complete, refresh GitHub in your browser\n    - You can edit files directly in GitHub\n- Now we'll **fetch** and **pull** the changes from GitHub back to our local copy\n    - **Fetch**:  Compare the local tree to the remote tree, noting any differences.  Use this to preview the changes on the remote \n    - In Sourcetree, hit Fetch in the toolbar.  Note that the GitHub commit shows up in the History panel. \n    - **Pull**:  Actually download the remote changes and incorporate them into your local tree. \n\n\n### Lab: Working with *someone else's* repos ###\n- GitHub lets you download someone else's repo (**clone**), and modify it locally, but *not* upload directly.  \n- You can suggest a change to someone else's code by submitting a **pull request**, which first requires **forking** the repository.  \n\n\n::: {.cell}\n::: {.cell-output-display}\n![*Forking* copies a repository to your GitHub account.  Then you *clone* the copy to your local machine.  You can *push* to your remote copy as usual.  You can suggest changes to the original using a *pull request*.  Source: <https://happygitwithr.com/fork-and-clone.html>](images/02-basics/fork-and-clone.png){width=960}\n:::\n:::\n\n\n- Start with the repo for this week's lab:  <https://github.com/data-science-methods/lab-w02-git>\n- **Fork**: Look for the `fork` button in the upper-right\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The *fork* button is near the upper-right corner of a GitHub repository page.  I wasn't able to find a keyboard shortcut for this.  :-(](images/02-basics/fork-button.png){width=390}\n:::\n:::\n\n\n- **Clone**: After creating the fork, you need to download a copy to your machine. \n    - In Sourcetree's repository browser, select New... > Clone from URL\n    \n- This lesson continues in the lab.  Open `lab.html` and `lab.R` to continue.  \n\n\n## Further reading\n\n- @HesterHappyGitGitHub\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}