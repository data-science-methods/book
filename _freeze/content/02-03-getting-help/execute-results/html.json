{
  "hash": "3b9e3c665c164ce0603689609309075f",
  "result": {
    "markdown": "# Warnings, Errors, and Getting Help \n\n## Reading\n\n- @BryanObjectTypeClosure2020\n- @FaqHowMake\n- @WickhamDebugging2019\n\n## Dependencies\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('lubridate', 'assertthat', 'reprex')\n```\n:::\n\n\n## Messages, warnings, and errors\n\n- *Message*:  Things are fine, but here's some information you should know\n- *Warning*:  Uhhhh I'm gonna keep going, but maybe this isn't what you want\n- *Error*:  Nope.  I'm stopping here.  You need to fix the thing. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage('Hey, just FYI')\nwarning('Uhhhh might want to check this out')\nstop('Noooooo')\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): Noooooo\n```\n:::\n:::\n\n\n## Where to go for help\n\n- [Rubber duck debugging](https://en.wikipedia.org/wiki/Rubber_duck_debugging)\n- Isolate the problem\n- Restart your session: Session $\\to$ Restart R\n- Local help: `?fun`\n- StackOverflow: <https://stackoverflow.com/questions/tagged/r>\n- CRAN $\\to$ BugReports (usually GitHub Issues)\n\n## Example: Dates are often problems\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n\nadd_six_months = function(date_str) {\n    parsed_dates = parse_date_time(date_str, orders = 'mdY')\n    parsed_dates %m+% months(6) \n}\n\nsome_data = c('June 2002', 'May 15, 2007', 'August 2007')\nadd_six_months(some_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA               \"2007-11-15 UTC\" NA              \n```\n:::\n:::\n\n\n---\n\n- Note that this is a warning, not an error\n    - R won't stop running here (unless we tell it to)\n    - Errors might not show up until much later in our code, making it hard to identify the root cause\n    - Or they might cause invisible problems, eg, by default `lm()` silently drops observations with missing values\n\n## To catch warnings\n\n- Set `options(warn = 2)` to turn all warnings into errors\n- Use `tryCatch()` with the `warning` argument\n    - Example: <https://stackoverflow.com/questions/8217901/breaking-loop-when-warnings-appear-in-r/8218794#8218794>\n- Write a unit test\n- My preferred approach: Add an **assertion** to your primary code\n    \n\n::: {.cell}\n\n```{.r .cell-code}\n## Using an assertion to prevent warnings from cascading\nlibrary(assertthat)\n\nsix_months_later = add_six_months(some_data)\nassert_that(all(!is.na(six_months_later)), \n            msg = 'Missing values in `six_months_later`')\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: Missing values in `six_months_later`\n```\n:::\n:::\n\n\n## Debugging \n\n- Let's start by using the RStudio debugger to **isolate the problem**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndebugonce(add_six_months)\nadd_six_months(some_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndebugging in: add_six_months(some_data)\ndebug at <text>#3: {\n    parsed_dates = parse_date_time(date_str, orders = \"mdY\")\n    parsed_dates %m+% months(6)\n}\ndebug at <text>#4: parsed_dates = parse_date_time(date_str, orders = \"mdY\")\ndebug at <text>#5: parsed_dates %m+% months(6)\nexiting from: add_six_months(some_data)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA               \"2007-11-15 UTC\" NA              \n```\n:::\n:::\n\n\n- The problem is in `lubridate::parse_date_time()`.  \n- *Spend a few minutes reading the documentation for this function and playing around with the call.* \n    - What does the argument `orders` do? \n\n\n::: {.cell}\n\n```{.r .cell-code}\n?parse_date_time\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nparse_date_time(some_data, orders = 'mdY')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA               \"2007-05-15 UTC\" NA              \n```\n:::\n:::\n\n\n---\n\n- Let's try SO: <https://stackoverflow.com/search?q=%5BR%5D+lubridate+month-year>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparse_date_time(some_data, orders = c('mY', 'mdY'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2002-06-01 UTC\" \"2007-05-15 UTC\" \"2007-08-01 UTC\"\n```\n:::\n:::\n\n\n- *Make this change in `add_six_months()` and confirm it no longer trips the assertion.* \n\n## Another example: More fun with dates\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmore_data = c('May 7, 2017', 'May 19, 2017', 'May Fifth, 2017')\nmdy(more_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2017-05-07\" \"2017-05-19\" \"2017-05-20\"\n```\n:::\n:::\n\n\n- SO doesn't seem so helpful: <https://stackoverflow.com/search?q=%5BR%5D+lubridate+written+days>\n\n---\n\n- The CRAN page for `lubridate` includes a link to report bugs: <https://cran.r-project.org/web/packages/lubridate/index.html>\n\n![Screenshot of `lubridate` on CRAN, highlighting the BugReports field](images/02-basics/lubridate_cran.png)\n\n---\n\n- Trying a couple of searches gives us a promising result: <https://github.com/tidyverse/lubridate/issues?q=is%3Aissue+is%3Aopen+mdy>\n    \n![Screenshot of `lubridate` issues page, showing a relevant search result (August 2021)](images/02-basics/lubridate_issues.png)\n\n---\n\nThis is a known bug; it looks like they're thinking about doing something about it, but the only workaround is to create an NA:  <https://github.com/tidyverse/lubridate/issues/685>\n\n\n## Writing a reproducible example: `reprex`\n\n- <https://reprex.tidyverse.org/>\n- <https://reprex.tidyverse.org/articles/articles/learn-reprex.html>\n- <https://reprex.tidyverse.org/articles/reprex-dos-and-donts.html>\n\n- *Practice by writing a reprex for one of our two examples*\n\n## Do not do these things in your reprex (or anywhere else)\n\n[Or Jenny Bryan will come to your office and set your computer on fire](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/). \n\n- `setwd('/users/danhicks/projects/catsaregreat/myscript/')`\n    - Used to ensure that R is running where your file is\n    - Unnecessary if you're opening different projects in different RStudio sessions\n    - Will cause irrelevant errors on any other system\n    - Instead, use `file.path()` or `here::here()` to build paths\n    \n- `rm(list=ls())`\n    - Used because people think it clears out the global environment\n    - Unnecessary if you're regularly using Session $\\to$ Restart R\n    - Also unnecessary at the top of a `Rmd` file, which is always knit in a new session\n    - Doesn't actually clear out the global environment\n        - eg, doesn't unload packages or reset `options()`\n        \nNot on Bryan's list, but also don't do it: \n\n- `require(package)`\n    - If `package` is installed, will act just like `library()`\n    - If not, will return `FALSE`\n        - The script will keep going until there's an error about a missing function 300 lines later\n        - Probably not the error you wanted help with\n        - Annoying to debug because I have no idea where the function is supposed to come from\n    - If `library()` can't find the package, it immediately raises an error\n        - I can tell right away what package needs to be installed\n\n## Debugging in RStudio\n\n[This week's lab](https://github.com/data-science-methods/lab-w03-debugging) introduces you to some of RStudio's debugging tools. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}