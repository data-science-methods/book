[
["index.html", "Data Science Methods for Cognitive Science Preface", " Data Science Methods for Cognitive Science Dan Hicks, hicks.daniel.j@gmail.com 2020-07-09 Preface This document is a set of notes (and perhaps later a textbook) for a course on data science methods for graduate students in social and behavioral sciences, taught by Professor Dan Hicks (they/them), UC Merced. "],
["week-0-setting-up.html", "Week 0: Setting up 0.1 R and RStudio: The Mac Way 0.2 R and RStudio: The Cloud Way 0.3 GitHub 0.4 Screen Layouts", " Week 0: Setting up Before the first day of class, you’ll need to set up three things: R, RStudio, and a GitHub account. R is the primary piece of software we’ll be learning to use. RStudio is an IDE (integrated development environment) for using R. (Think of R as the engine of a car and RStudio as the dashboard, steering wheel, and pedals.) GitHub is a service for sharing and collaborating on software engineering. I’ll assume you have R and RStudio installed using either the cloud way or the Mac way. If your computer is running Windows, Linux, or some other operating system that isn’t Mac OS, I’m going to assume you have things set up the cloud way. These other operating systems are perfectly fine. But I don’t use them, which makes it much harder for me to help you if things aren’t working. And Windows handles things like file paths and text file formats in idiosyncratic ways that can cause weird errors. In either case, all of the software and services we’ll be using are either free or freemium. You won’t need any of the paid extras for this course. 0.1 R and RStudio: The Mac Way With this way, R and RStudio are installed and run on your computer, and all of the data files that you work with will also be on your computer. Unless you’re running a Chromebook or similar, your computer is almost certainly more powerful than the default instance that RStudio Cloud gives you (see below), and you can use familiar tools to do things like organize folders and preview files. But sometimes particular details about the way your computer is set up can cause R and RStudio to do weird things, and these problems can be very difficult to diagnose and solve. Go to https://cran.r-project.org/. Download and install the latest release of R for your operating system (which should be Mac OS if you’re following this way). As of 2020-06-02, the latest release is 4.0.0. Go to rstudio.com. Download and install the latest release of RStudio Desktop for your operating system (which should be Mac OS if you’re following this way). As of 2020-06-02, the latest release is 1.3.959. 0.2 R and RStudio: The Cloud Way (Note 2017-07-07 Starting in August, RStudio Cloud is moving out of beta and becoming a regular subscription service. Information on pricing is at https://rstudio.cloud/plans/free. We’ll have to try it out, but it seems likely that the Free tier won’t give you enough compute time (“project hours”) for this course. I can subscribe to the Instructor tier, but that has its own limitations. We’ll have to see how things go.) With this way, R and RStudio are installed and run on virtual computers (called instances) on a big server somewhere. Each project can have its own instance, meaning that it runs on a nice clean computer and shouldn’t have any weirdness. The RStudio Cloud service is currently in beta; it’s free to use, but not completely guaranteed to be free of bugs. In order to use the service, you have to be connected to the internet, and you’ll have to use the RStudio interface or a terminal window to do things like move files around. Also, the instances aren’t very powerful, and so they’ll be slow if you try to work with large data sets or do a complex analysis. Go to rstudio.cloud. Look for “Sign Up” in the upper right.1 0.3 GitHub Go to github.com. You can create a new account right on the front page. You can fill in your profile if you want. 0.4 Screen Layouts In this course, lectures will be based around live coding. This means that I (or whoever’s doing the lecturing) will be writing code in real time, and you’ll follow along, transcribing the code into RStudio (or whatever) on your local machine and running it at the same time as me. Live coding is a great way to learn coding practices. But it requires you to have quick access to 3-5 different things: * My screenshare (so you can see what I’m typing) * The course chat (so you can ask for help or other questions, or make comments) * Possibly a separate way to put up a flag so that I can see immediately that you have a question * Your own workspace (RStudio or whatever) * Possibly a separate app for taking notes In an ordinary classroom, the first three things would all be handled by the classroom environment. In a fully online setting, everything needs to be handled on your computer. The most effective way to do this is to have multiple displays. This is also the most expensive. This blog post discusses alternatives to multiple displays. In particular, this window layout fits the screenshare, chat, and your workspace on to a single laptop display. You can also have a separate text file open in RStudio for notes. RStudio gives you the option to log in with Google or GitHub. As a general practice, I recommend always keeping your accounts separate. Use a password manager to generate separate, strong passwords for each site. I use LastPass.↩︎ "],
["introduction.html", "Week 1 Introduction 1.1 What this course isn’t, and is 1.2 Notes on some design decisions 1.3 Let’s get started with RStudio 1.4 Base R data types", " Week 1 Introduction 1.1 What this course isn’t, and is Is Not: statistics (in the way you think) general introduction to software engineering Is: data cleaning, data management, and exploratory data analysis habituation to some good software engineering practices that are especially valuable for data science work 1.2 Notes on some design decisions R, not Python Python is a perfectly good language for general programming And has some advantages over R in certain data science aspects, including working with strings and developing custom data structures R is a better language for doing data science Vectors, data frames, and common statistical models are installed and loaded by default R is more functional R is also better for beginners CRAN RStudio Scripts, not notebooks Quite a few scientists like the way notebooks mix together code, visualizations, tables, and text Notebooks do not play nicely with version control Notebooks encourage bad habits and discourage good ones 1.3 Let’s get started with RStudio Quick tour of RStudio’s UI Let’s plot a thing data(anscombe) ## &lt;https://en.wikipedia.org/wiki/Anscombe%27s_quartet&gt; anscombe ## x1 x2 x3 x4 y1 y2 y3 y4 ## 1 10 10 10 8 8.04 9.14 7.46 6.58 ## 2 8 8 8 8 6.95 8.14 6.77 5.76 ## 3 13 13 13 8 7.58 8.74 12.74 7.71 ## 4 9 9 9 8 8.81 8.77 7.11 8.84 ## 5 11 11 11 8 8.33 9.26 7.81 8.47 ## 6 14 14 14 8 9.96 8.10 8.84 7.04 ## 7 6 6 6 8 7.24 6.13 6.08 5.25 ## 8 4 4 4 19 4.26 3.10 5.39 12.50 ## 9 12 12 12 8 10.84 9.13 8.15 5.56 ## 10 7 7 7 8 4.82 7.26 6.42 7.91 ## 11 5 5 5 8 5.68 4.74 5.73 6.89 str(anscombe) ## &#39;data.frame&#39;: 11 obs. of 8 variables: ## $ x1: num 10 8 13 9 11 14 6 4 12 7 ... ## $ x2: num 10 8 13 9 11 14 6 4 12 7 ... ## $ x3: num 10 8 13 9 11 14 6 4 12 7 ... ## $ x4: num 8 8 8 8 8 8 8 19 8 8 ... ## $ y1: num 8.04 6.95 7.58 8.81 8.33 ... ## $ y2: num 9.14 8.14 8.74 8.77 9.26 8.1 6.13 3.1 9.13 7.26 ... ## $ y3: num 7.46 6.77 12.74 7.11 7.81 ... ## $ y4: num 6.58 5.76 7.71 8.84 8.47 7.04 5.25 12.5 5.56 7.91 ... summary(anscombe) ## x1 x2 x3 x4 y1 ## Min. : 4.0 Min. : 4.0 Min. : 4.0 Min. : 8 Min. : 4.260 ## 1st Qu.: 6.5 1st Qu.: 6.5 1st Qu.: 6.5 1st Qu.: 8 1st Qu.: 6.315 ## Median : 9.0 Median : 9.0 Median : 9.0 Median : 8 Median : 7.580 ## Mean : 9.0 Mean : 9.0 Mean : 9.0 Mean : 9 Mean : 7.501 ## 3rd Qu.:11.5 3rd Qu.:11.5 3rd Qu.:11.5 3rd Qu.: 8 3rd Qu.: 8.570 ## Max. :14.0 Max. :14.0 Max. :14.0 Max. :19 Max. :10.840 ## y2 y3 y4 ## Min. :3.100 Min. : 5.39 Min. : 5.250 ## 1st Qu.:6.695 1st Qu.: 6.25 1st Qu.: 6.170 ## Median :8.140 Median : 7.11 Median : 7.040 ## Mean :7.501 Mean : 7.50 Mean : 7.501 ## 3rd Qu.:8.950 3rd Qu.: 7.98 3rd Qu.: 8.190 ## Max. :9.260 Max. :12.74 Max. :12.500 library(ggplot2) ggplot(data = anscombe, aes(x = x1, y = y1)) + geom_point() Exercise: plot the other three datasets anscombe$x1 ## [1] 10 8 13 9 11 14 6 4 12 7 5 anscombe[[&#39;x1&#39;]] ## [1] 10 8 13 9 11 14 6 4 12 7 5 anscombe[,&#39;x1&#39;] ## [1] 10 8 13 9 11 14 6 4 12 7 5 anscombe[,1] ## [1] 10 8 13 9 11 14 6 4 12 7 5 mean(anscombe$x1) ## [1] 9 mean(anscombe$x2) ## [1] 9 sd(anscombe$y1) ## [1] 2.031568 sd(anscombe$y2) ## [1] 2.031657 cor(anscombe$x1, anscombe$y1) ## [1] 0.8164205 Exercise: Calculate correlations for all four x-y pairs Some idiosyncracies of my code ' rather than \" ## for documentation comment = not &lt;- for assignment Essential Global Options Never save .Rdata, load workspace Super useful custom keyboard commands: Tools \\(\\to\\) Modify Keyboard Shortcuts… ⌘+1, ⌘+2, ⌘+3 1.4 Base R data types 1.4.1 Numerics foo = 2 bar = 3 foobar = foo + bar foo / bar ## [1] 0.6666667 try(foo / 0) ## [1] Inf 1.4.2 Vectors foo = c(2, 3, 4) bar = c(5, 6, 7) foo[2] ## [1] 3 foo[2:3] ## [1] 3 4 try(foo[1, 3]) ## Error in foo[1, 3] : incorrect number of dimensions foo[c(1, 3)] ## [1] 2 4 foo + bar ## [1] 7 9 11 foo * bar ## [1] 10 18 28 ## NB difference between vector and length-1 comparisons bar == foo + 3 ## [1] TRUE TRUE TRUE identical(bar, foo + 3) ## [1] TRUE c(foo, bar) ## [1] 2 3 4 5 6 7 1.4.3 Strings foo = c(&#39;monkey&#39;, &#39;banana&#39;) bar = c(&#39;house&#39;) ## How to put these together? try(foo + bar) ## Error in foo + bar : non-numeric argument to binary operator c(foo, bar) ## [1] &quot;monkey&quot; &quot;banana&quot; &quot;house&quot; paste(foo, bar) ## [1] &quot;monkey house&quot; &quot;banana house&quot; paste0(foo, bar) ## [1] &quot;monkeyhouse&quot; &quot;bananahouse&quot; 1.4.4 Factors foo_str = c(&#39;foo&#39;, &#39;foo&#39;, &#39;bar&#39;, &#39;zoo&#39;) as.integer(foo_str) ## Warning: NAs introduced by coercion ## [1] NA NA NA NA foo_fct = as.factor(foo_str) as.integer(foo) ## Warning: NAs introduced by coercion ## [1] NA NA levels(foo_fct) ## [1] &quot;bar&quot; &quot;foo&quot; &quot;zoo&quot; 1.4.5 Lists [todo] 1.4.6 Data frames [todo] 1.4.7 [examining variables] length str class, typeof challenge 1.4.8 [Missing data] https://gge-ucd.github.io/R-DAVIS/lesson_how_r_thinks_about_data.html#missing_data "],
["git-and-data-management.html", "Week 2 Git and Data Management", " Week 2 Git and Data Management "],
["cleaning-data.html", "Week 3 Cleaning Data", " Week 3 Cleaning Data "],
["errors-warnings-and-getting-help.html", "Week 4 Errors, Warnings, and Getting Help", " Week 4 Errors, Warnings, and Getting Help "],
["exploratory-data-analysis.html", "Week 5 Exploratory Data Analysis", " Week 5 Exploratory Data Analysis "],
["references.html", "References", " References "]
]
