# Readable code is reliable code 

## Reading 

- @BryanCodeSmellsFeels2018
- @PostolovskiYourCodeReview2020
- @BuckensSelfdocumentingMythHow2019


## Writing code is writing

- Multiple audiences
    - Collaborators
    - (Some) reviewers and readers of the paper
    - Peers who want to analyze and extend your methods
    - *Yourself in six months*

> Any code of your own that you haven't looked at for six or more months might as well have been written by someone else. ("Eagleson's Law")

- Your code is *readable* to the extent that people can use it to easily and reliably 
    - predict, 
    - diagnose, and
    - extend your code


## Code style ##

- iNéwritteNélanguagEáconventionSéfoRîpunctuatioNøcapitalizatioNîaiDécompr\
  ehensioNébYéindicatinGéstructurE
    - this is what it's like to read poorly-styled code
    - conventions only work if they're *shared* conventions

- Style guides provide shared conventions for readable code
    - In-line spacing makes it easier to pick out distinguish functions, operators, and variables in a line
    - Returns distinguish arguments in a function call
    - Indentation corresponds to structure of complex expressions
    - Common conventions for naming, assignment reduce cognitive load

- Tidyverse style guide:  <https://style.tidyverse.org/>


## Highlights from the Tidyverse style guide ##

- Place all `package()` calls at the top of the script
- Limit your code to 80 characters per line
- Use at least 4 spaces for indenting multiline expression
    - Control-I in RStudio will do automagic indenting
- In multiline function calls, 1 argument = 1 line

```{r}
#| eval: false
long_function_name <- function(a = "a long argument",
                               b = "another argument",
                               c = "another long argument") {
  # As usual code is indented by two spaces.
}
```

## Using comments to explain why and indicate structure {.smaller}

```{r}
#| eval: false
loading_table = function(model, 
                         threshold = .3, 
                         quiet = FALSE, 
                         path = NULL, 
                         overwrite = FALSE) {
    loadings_unfltd = model |> 
        ## Extract loadings and tidy
        loadings() |> 
        unclass() |> 
        as_tibble(rownames = 'item') |> 
        ## loadings() returns a wide item x factor matrix
        pivot_longer(-item, names_to = 'factor', values_to = 'loading')
        ## Will filter based on `threshold` below
    
    ## Dropped items
    if (!quiet) {
        loadings_df = filter(loadings_unfltd, abs(loading) > threshold)
        dropped_df = loadings_unfltd |> 
            pivot_wider(names_from = 'factor', values_from = 'loading') |> 
            anti_join(pivot_wider(loadings_df, 
                                  names_from = 'factor', 
                                  values_from = 'loading'), 
                      by = 'item')
        message('Dropped items')
        print(dropped_df)
    }
    
    ## Cross-loaded items
    if (!quiet) {
        xload_df = loadings_df |>
            add_count(item) |>
            filter(n > 1) |>
            select(-n) |>
            pivot_wider(names_from = 'factor', values_from = 'loading')
        message('Cross-loaded items')
        print(xload_df)
    }
    
    loadings_clean = loadings_df |>
        anti_join(xload_df, by = 'item') |>
        ## Spread back out to item x factor for presentation
        pivot_wider(names_from = 'factor', values_from = 'loading') |>
        arrange(across(starts_with('MR'), desc)) |> 
        left_join(vis_labels, by = c('item' = 'tag')) |> 
        select(-item.y)
    
    if (!is.null(path)) {
        if (!file.exists(path) || overwrite) {
            write_csv(loadings_clean, path, na = '')
        }
        if (file.exists(path) && !overwrite) {
            warning('CSV already exists; skipping overwrite')
        }
    }
    
    return(loadings_clean)
}
```


## Spaces: Let your code  b r e a t h e

- Always put spaces after commas, and never before (like English)
- But not between a function name and the parentheses (like math)
- And surrounding infix operators (`==`, `+`, `-`, `<-`, `=`)
- Pipes `%>%` `|>` should have a space before and be at the end of the line


## Code blocks
When you put a block of code in curly braces `{}`: 

- `{` should be the last character on a line
- `}` should be the first character on the line

```{r, eval = FALSE}
if (y == 0) {
  if (x > 0) {
    log(x)
  } else {
    message("x is negative or zero")
  }
} else {
  y^x
}
```


## Boolean variables vs. control flow

- Functions that return vectors: 
    - `&`, `|`, `==`, `ifelse()`, `dplyr::if_else()`
- Functions that return a single value: 
    - `&&`, `||`, `identical`
- `if (x) a else b` only looks at the first (hopefully single) value of `x`

## References

